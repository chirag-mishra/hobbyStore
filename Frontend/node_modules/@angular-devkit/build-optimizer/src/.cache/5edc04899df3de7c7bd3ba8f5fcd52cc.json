{"remainingRequest":"e:\\uwaah\\hobbyStore\\Frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!e:\\uwaah\\hobbyStore\\Frontend\\node_modules\\core-js\\modules\\_to-primitive.js","dependencies":[{"path":"e:\\uwaah\\hobbyStore\\Frontend\\node_modules\\core-js\\modules\\_to-primitive.js","mtime":1534369030926},{"path":"e:\\uwaah\\hobbyStore\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534369027821},{"path":"e:\\uwaah\\hobbyStore\\Frontend\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1534369016300}],"contextDependencies":[],"result":["// 7.1.1 ToPrimitive(input [, PreferredType])\r\nvar isObject = require('./_is-object');\r\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\r\n// and the second argument - flag - preferred type is a string\r\nmodule.exports = function (it, S) {\r\n  if (!isObject(it)) return it;\r\n  var fn, val;\r\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\r\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\r\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\r\n  throw TypeError(\"Can't convert object to primitive value\");\r\n};\r\n",null]}