(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/common/http'), require('rxjs/Subject'), require('rxjs/observable/of'), require('rxjs/operators')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/common/http', 'rxjs/Subject', 'rxjs/observable/of', 'rxjs/operators'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.ngxTypeahead = {}),global.ng.core,global.ng.common,global.ng.commmon.http,global.Rx,global.Rx.Observable.prototype,global.Rx.Observable.prototype));
}(this, (function (exports,core,common,http,Subject,of,operators) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */



var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};

/**
 * @license ngx-typeahead
 * MIT license
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var Key = {
    Backspace: 8,
    Tab: 9,
    Enter: 13,
    Shift: 16,
    Escape: 27,
    ArrowLeft: 37,
    ArrowRight: 39,
    ArrowUp: 38,
    ArrowDown: 40,
    // http://unixpapa.com/js/key.html
    MacCommandLeft: 91,
    MacCommandRight: 93,
    MacCommandFirefox: 224,
};
Key[Key.Backspace] = "Backspace";
Key[Key.Tab] = "Tab";
Key[Key.Enter] = "Enter";
Key[Key.Shift] = "Shift";
Key[Key.Escape] = "Escape";
Key[Key.ArrowLeft] = "ArrowLeft";
Key[Key.ArrowRight] = "ArrowRight";
Key[Key.ArrowUp] = "ArrowUp";
Key[Key.ArrowDown] = "ArrowDown";
Key[Key.MacCommandLeft] = "MacCommandLeft";
Key[Key.MacCommandRight] = "MacCommandRight";
Key[Key.MacCommandFirefox] = "MacCommandFirefox";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} keyCode
 * @return {?}
 */
function validateNonCharKeyCode(keyCode) {
    return [
        Key.Enter,
        Key.Tab,
        Key.Shift,
        Key.ArrowLeft,
        Key.ArrowUp,
        Key.ArrowRight,
        Key.ArrowDown,
        Key.MacCommandLeft,
        Key.MacCommandRight,
        Key.MacCommandFirefox
    ].every(function (codeKey) { return codeKey !== keyCode; });
}
/**
 * @param {?} keyCode
 * @return {?}
 */
function validateArrowKeys(keyCode) {
    return keyCode === Key.ArrowDown || keyCode === Key.ArrowUp;
}
/**
 * @param {?} index
 * @param {?} currentIndex
 * @return {?}
 */
function isIndexActive(index, currentIndex) {
    return index === currentIndex;
}
/**
 * @param {?} event
 * @return {?}
 */
function isEnterKey(event) {
    return event.keyCode === Key.Enter;
}
/**
 * @param {?} event
 * @return {?}
 */
function isEscapeKey(event) {
    return event.keyCode === Key.Escape;
}
/**
 * @param {?} query
 * @param {?=} queryParamKey
 * @param {?=} customParams
 * @return {?}
 */
function createParamsForQuery(query, queryParamKey, customParams) {
    if (queryParamKey === void 0) { queryParamKey = "q"; }
    if (customParams === void 0) { customParams = {}; }
    var /** @type {?} */ searchParams = __assign((_a = {}, _a[queryParamKey] = query, _a), customParams);
    // tslint:disable-next-line
    var /** @type {?} */ setParam = function (acc, param) {
        return acc.set(param, searchParams[param]);
    };
    var /** @type {?} */ params = Object.keys(searchParams).reduce(setParam, new http.HttpParams());
    return params;
    var _a;
}
/**
 * @param {?=} method
 * @return {?}
 */
function resolveApiMethod(method) {
    if (method === void 0) { method = ""; }
    var /** @type {?} */ isMethodValid = [
        "get",
        "post",
        "put",
        "delete",
        "patch",
        "request"
    ].some(function (methodName) { return method === methodName; });
    var /** @type {?} */ apiMethod = isMethodValid ? method : "get";
    return apiMethod;
}
/**
 * @param {?} currentIndex
 * @param {?} stepUp
 * @param {?=} listLength
 * @return {?}
 */
function resolveNextIndex(currentIndex, stepUp, listLength) {
    if (listLength === void 0) { listLength = 10; }
    var /** @type {?} */ step = stepUp ? 1 : -1;
    var /** @type {?} */ topLimit = listLength - 1;
    var /** @type {?} */ bottomLimit = 0;
    var /** @type {?} */ currentResultIndex = currentIndex + step;
    var /** @type {?} */ resultIndex = currentResultIndex;
    if (currentResultIndex === topLimit + 1) {
        resultIndex = bottomLimit;
    }
    if (currentResultIndex === bottomLimit - 1) {
        resultIndex = topLimit;
    }
    return resultIndex;
}
/**
 * @param {?} response
 * @return {?}
 */
function toJsonpSingleResult(response) {
    return response[1];
}
/**
 * @param {?} results
 * @return {?}
 */
function toJsonpFinalResults(results) {
    return results.map(function (result) { return result[0]; });
}
/**
 * @param {?} query
 * @return {?}
 */
function hasCharacters(query) {
    return query.length > 0;
}
/**
 * @param {?} e
 * @return {?}
 */
function toFormControlValue(e) {
    return e.target.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxTypeAheadComponent = (function () {
    function NgxTypeAheadComponent(element, viewContainer, http$$1, cdr) {
        this.element = element;
        this.viewContainer = viewContainer;
        this.http = http$$1;
        this.cdr = cdr;
        this.showSuggestions = false;
        this.taUrl = "";
        this.taParams = {};
        this.taQueryParam = "q";
        this.taApi = "jsonp";
        this.taApiMethod = "get";
        this.taList = [];
        this.taDebounce = 300;
        this.taSelected = new core.EventEmitter();
        this.suggestionIndex = 0;
        this.keydown$ = new Subject.Subject();
        this.keyup$ = new Subject.Subject();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.handleEsc = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (isEscapeKey(event)) {
            this.hideSuggestions();
            event.preventDefault();
        }
        this.keydown$.next(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.onkeyup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.keyup$.next(event);
    };
    /**
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.filterEnterEvent(this.keydown$);
        this.listenAndSuggest(this.keyup$);
        this.navigateWithArrows(this.keydown$);
        this.renderTemplate();
    };
    /**
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.keydown$.complete();
        this.keyup$.complete();
    };
    /**
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.renderTemplate = /**
     * @return {?}
     */
    function () {
        this.viewContainer.createEmbeddedView(this.suggestionsTplRef);
        this.cdr.markForCheck();
    };
    /**
     * @param {?} obs
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.listenAndSuggest = /**
     * @param {?} obs
     * @return {?}
     */
    function (obs) {
        var _this = this;
        return obs
            .pipe(operators.filter(function (e) { return validateNonCharKeyCode(e.keyCode); }), operators.map(toFormControlValue), operators.debounceTime(this.taDebounce), operators.concat(), operators.distinctUntilChanged(), operators.filter(hasCharacters), operators.switchMap(function (query) { return _this.suggest(query); }))
            .subscribe(function (results) {
            _this.results = results;
            _this.suggestionIndex = -1;
            _this.displaySuggestions(Key.ArrowDown);
        });
    };
    /**
     * @param {?} elementObs
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.filterEnterEvent = /**
     * @param {?} elementObs
     * @return {?}
     */
    function (elementObs) {
        var _this = this;
        return elementObs
            .pipe(operators.filter(isEnterKey))
            .subscribe(function (event) {
            _this.handleSelectSuggestion(_this.activeResult);
        });
    };
    /**
     * @param {?} elementObs
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.navigateWithArrows = /**
     * @param {?} elementObs
     * @return {?}
     */
    function (elementObs) {
        var _this = this;
        return elementObs
            .pipe(operators.filter(function (e) { return validateArrowKeys(e.keyCode); }), operators.map(function (e) { return e.keyCode; }))
            .subscribe(function (keyCode) { return _this.displaySuggestions(keyCode); });
    };
    /**
     * @param {?} keyCode
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.displaySuggestions = /**
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        this.suggestionIndex = resolveNextIndex(this.suggestionIndex, keyCode === Key.ArrowDown, this.results.length);
        this.showSuggestions = true;
        this.cdr.markForCheck();
    };
    /**
     * @param {?} query
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.suggest = /**
     * @param {?} query
     * @return {?}
     */
    function (query) {
        return this.taList.length
            ? this.createListSource(this.taList, query)
            : this.request(query);
    };
    /**
     * peforms a jsonp/http request to search with query and params
     * @param query the query to search from the remote source
     */
    /**
     * peforms a jsonp/http request to search with query and params
     * @param {?} query the query to search from the remote source
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.request = /**
     * peforms a jsonp/http request to search with query and params
     * @param {?} query the query to search from the remote source
     * @return {?}
     */
    function (query) {
        var /** @type {?} */ url = this.taUrl;
        var /** @type {?} */ searchConfig = createParamsForQuery(query, this.taQueryParam, this.taParams);
        var /** @type {?} */ options = {
            params: searchConfig
        };
        var /** @type {?} */ isJsonpApi = this.taApi === "jsonp";
        return isJsonpApi
            ? this.requestJsonp(url, options, this.taCallbackParamValue)
            : this.requestHttp(url, options);
    };
    /**
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.requestHttp = /**
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    function (url, options) {
        var /** @type {?} */ apiMethod = resolveApiMethod(this.taApiMethod);
        return this.http[apiMethod](url, options);
    };
    /**
     * @param {?} url
     * @param {?} options
     * @param {?=} callback
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.requestJsonp = /**
     * @param {?} url
     * @param {?} options
     * @param {?=} callback
     * @return {?}
     */
    function (url, options, callback) {
        if (callback === void 0) { callback = "callback"; }
        var /** @type {?} */ params = options.params.toString();
        return this.http
            .jsonp(url + "?" + params, callback)
            .pipe(operators.map(toJsonpSingleResult), operators.map(toJsonpFinalResults));
    };
    /**
     * @param {?} index
     * @param {?} result
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.markIsActive = /**
     * @param {?} index
     * @param {?} result
     * @return {?}
     */
    function (index, result) {
        var /** @type {?} */ isActive = isIndexActive(index, this.suggestionIndex);
        if (isActive) {
            this.activeResult = result;
        }
        return isActive;
    };
    /**
     * @param {?} suggestion
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.handleSelectSuggestion = /**
     * @param {?} suggestion
     * @return {?}
     */
    function (suggestion) {
        this.hideSuggestions();
        this.taSelected.emit(suggestion);
    };
    /**
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.hideSuggestions = /**
     * @return {?}
     */
    function () {
        this.showSuggestions = false;
    };
    /**
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.hasItemTemplate = /**
     * @return {?}
     */
    function () {
        return this.taItemTpl !== undefined;
    };
    /**
     * @param {?} list
     * @param {?} query
     * @return {?}
     */
    NgxTypeAheadComponent.prototype.createListSource = /**
     * @param {?} list
     * @param {?} query
     * @return {?}
     */
    function (list, query) {
        return of.of(list.filter(function (item) { return item.includes(query); }));
    };
    NgxTypeAheadComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "[ngxTypeahead]",
                    styles: [
                        "\n  .ta-results {\n    position: absolute;\n  }\n  .ta-backdrop {\n    bottom: 0;\n    left: 0;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 1;\n  }\n  .ta-item {\n    position: relative;\n    z-index: 2;\n    display: block;\n  }\n  "
                    ],
                    template: "\n  <ng-template #suggestionsTplRef>\n  <section class=\"ta-results list-group\" *ngIf=\"showSuggestions\">\n    <div class=\"ta-backdrop\" (click)=\"hideSuggestions()\"></div>\n    <button type=\"button\" class=\"ta-item list-group-item\"\n      *ngFor=\"let result of results; let i = index;\"\n      [class.active]=\"markIsActive(i, result)\"\n      (click)=\"handleSelectSuggestion(result)\">\n      <span *ngIf=\"!taItemTpl\"><i class=\"fa fa-search\"></i> {{ result }}</span>\n      <ng-template\n        [ngTemplateOutlet]=\"taItemTpl\"\n        [ngTemplateOutletContext]=\"{ $implicit: {result: result, index: i} }\"\n      ></ng-template>\n    </button>\n  </section>\n  </ng-template>\n  "
                },] },
    ];
    /** @nocollapse */
    NgxTypeAheadComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.ViewContainerRef, },
        { type: http.HttpClient, },
        { type: core.ChangeDetectorRef, },
    ]; };
    NgxTypeAheadComponent.propDecorators = {
        "taItemTpl": [{ type: core.Input },],
        "taUrl": [{ type: core.Input },],
        "taParams": [{ type: core.Input },],
        "taQueryParam": [{ type: core.Input },],
        "taCallbackParamValue": [{ type: core.Input },],
        "taApi": [{ type: core.Input },],
        "taApiMethod": [{ type: core.Input },],
        "taList": [{ type: core.Input },],
        "taDebounce": [{ type: core.Input },],
        "taSelected": [{ type: core.Output },],
        "suggestionsTplRef": [{ type: core.ViewChild, args: ["suggestionsTplRef",] },],
        "handleEsc": [{ type: core.HostListener, args: ["keydown", ["$event"],] },],
        "onkeyup": [{ type: core.HostListener, args: ["keyup", ["$event"],] },],
    };
    return NgxTypeAheadComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxTypeaheadModule = (function () {
    function NgxTypeaheadModule() {
    }
    NgxTypeaheadModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [NgxTypeAheadComponent],
                    exports: [NgxTypeAheadComponent, common.CommonModule],
                    imports: [common.CommonModule, http.HttpClientModule, http.HttpClientJsonpModule],
                    providers: []
                },] },
    ];
    return NgxTypeaheadModule;
}());

exports.NgxTypeaheadModule = NgxTypeaheadModule;
exports.ɵa = NgxTypeAheadComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-typeahead.umd.js.map
